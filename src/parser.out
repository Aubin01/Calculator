Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VARIABLE ASSIGN expression
Rule 2     statement -> expression
Rule 3     statement -> VARIABLE
Rule 4     statement -> PRINT LPAREN VARIABLE RPAREN
Rule 5     expression -> expression PLUS term
Rule 6     expression -> expression MINUS term
Rule 7     expression -> term
Rule 8     term -> term MULTIPLY factor
Rule 9     term -> term DIVIDE factor
Rule 10    term -> factor
Rule 11    factor -> NUMBER
Rule 12    factor -> VARIABLE
Rule 13    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

ASSIGN               : 1
DIVIDE               : 9
LPAREN               : 4 13
MINUS                : 6
MULTIPLY             : 8
NUMBER               : 11
PLUS                 : 5
PRINT                : 4
RPAREN               : 4 13
VARIABLE             : 1 3 4 12
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 5 6 13
factor               : 8 9 10
statement            : 0
term                 : 5 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VARIABLE ASSIGN expression
    (2) statement -> . expression
    (3) statement -> . VARIABLE
    (4) statement -> . PRINT LPAREN VARIABLE RPAREN
    (5) expression -> . expression PLUS term
    (6) expression -> . expression MINUS term
    (7) expression -> . term
    (8) term -> . term MULTIPLY factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    VARIABLE        shift and go to state 2
    PRINT           shift and go to state 4
    NUMBER          shift and go to state 8
    LPAREN          shift and go to state 5

    statement                      shift and go to state 1
    expression                     shift and go to state 3
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 1

    (0) S' -> statement .



state 2

    (1) statement -> VARIABLE . ASSIGN expression
    (3) statement -> VARIABLE .
    (12) factor -> VARIABLE .

  ! reduce/reduce conflict for $end resolved using rule 3 (statement -> VARIABLE .)
    ASSIGN          shift and go to state 9
    $end            reduce using rule 3 (statement -> VARIABLE .)
    MULTIPLY        reduce using rule 12 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 12 (factor -> VARIABLE .)
    PLUS            reduce using rule 12 (factor -> VARIABLE .)
    MINUS           reduce using rule 12 (factor -> VARIABLE .)

  ! $end            [ reduce using rule 12 (factor -> VARIABLE .) ]


state 3

    (2) statement -> expression .
    (5) expression -> expression . PLUS term
    (6) expression -> expression . MINUS term

    $end            reduce using rule 2 (statement -> expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 4

    (4) statement -> PRINT . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 12


state 5

    (13) factor -> LPAREN . expression RPAREN
    (5) expression -> . expression PLUS term
    (6) expression -> . expression MINUS term
    (7) expression -> . term
    (8) term -> . term MULTIPLY factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    expression                     shift and go to state 13
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 6

    (7) expression -> term .
    (8) term -> term . MULTIPLY factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expression -> term .)
    MINUS           reduce using rule 7 (expression -> term .)
    $end            reduce using rule 7 (expression -> term .)
    RPAREN          reduce using rule 7 (expression -> term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 7

    (10) term -> factor .

    MULTIPLY        reduce using rule 10 (term -> factor .)
    DIVIDE          reduce using rule 10 (term -> factor .)
    PLUS            reduce using rule 10 (term -> factor .)
    MINUS           reduce using rule 10 (term -> factor .)
    $end            reduce using rule 10 (term -> factor .)
    RPAREN          reduce using rule 10 (term -> factor .)


state 8

    (11) factor -> NUMBER .

    MULTIPLY        reduce using rule 11 (factor -> NUMBER .)
    DIVIDE          reduce using rule 11 (factor -> NUMBER .)
    PLUS            reduce using rule 11 (factor -> NUMBER .)
    MINUS           reduce using rule 11 (factor -> NUMBER .)
    $end            reduce using rule 11 (factor -> NUMBER .)
    RPAREN          reduce using rule 11 (factor -> NUMBER .)


state 9

    (1) statement -> VARIABLE ASSIGN . expression
    (5) expression -> . expression PLUS term
    (6) expression -> . expression MINUS term
    (7) expression -> . term
    (8) term -> . term MULTIPLY factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    expression                     shift and go to state 17
    term                           shift and go to state 6
    factor                         shift and go to state 7

state 10

    (5) expression -> expression PLUS . term
    (8) term -> . term MULTIPLY factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    term                           shift and go to state 18
    factor                         shift and go to state 7

state 11

    (6) expression -> expression MINUS . term
    (8) term -> . term MULTIPLY factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    term                           shift and go to state 19
    factor                         shift and go to state 7

state 12

    (4) statement -> PRINT LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 20


state 13

    (13) factor -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS term
    (6) expression -> expression . MINUS term

    RPAREN          shift and go to state 21
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 14

    (12) factor -> VARIABLE .

    MULTIPLY        reduce using rule 12 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 12 (factor -> VARIABLE .)
    RPAREN          reduce using rule 12 (factor -> VARIABLE .)
    PLUS            reduce using rule 12 (factor -> VARIABLE .)
    MINUS           reduce using rule 12 (factor -> VARIABLE .)
    $end            reduce using rule 12 (factor -> VARIABLE .)


state 15

    (8) term -> term MULTIPLY . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    factor                         shift and go to state 22

state 16

    (9) term -> term DIVIDE . factor
    (11) factor -> . NUMBER
    (12) factor -> . VARIABLE
    (13) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 8
    VARIABLE        shift and go to state 14
    LPAREN          shift and go to state 5

    factor                         shift and go to state 23

state 17

    (1) statement -> VARIABLE ASSIGN expression .
    (5) expression -> expression . PLUS term
    (6) expression -> expression . MINUS term

    $end            reduce using rule 1 (statement -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11


state 18

    (5) expression -> expression PLUS term .
    (8) term -> term . MULTIPLY factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expression -> expression PLUS term .)
    MINUS           reduce using rule 5 (expression -> expression PLUS term .)
    $end            reduce using rule 5 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 19

    (6) expression -> expression MINUS term .
    (8) term -> term . MULTIPLY factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expression -> expression MINUS term .)
    MINUS           reduce using rule 6 (expression -> expression MINUS term .)
    $end            reduce using rule 6 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS term .)
    MULTIPLY        shift and go to state 15
    DIVIDE          shift and go to state 16


state 20

    (4) statement -> PRINT LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 24


state 21

    (13) factor -> LPAREN expression RPAREN .

    MULTIPLY        reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 13 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 13 (factor -> LPAREN expression RPAREN .)


state 22

    (8) term -> term MULTIPLY factor .

    MULTIPLY        reduce using rule 8 (term -> term MULTIPLY factor .)
    DIVIDE          reduce using rule 8 (term -> term MULTIPLY factor .)
    PLUS            reduce using rule 8 (term -> term MULTIPLY factor .)
    MINUS           reduce using rule 8 (term -> term MULTIPLY factor .)
    $end            reduce using rule 8 (term -> term MULTIPLY factor .)
    RPAREN          reduce using rule 8 (term -> term MULTIPLY factor .)


state 23

    (9) term -> term DIVIDE factor .

    MULTIPLY        reduce using rule 9 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 9 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 9 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 9 (term -> term DIVIDE factor .)
    $end            reduce using rule 9 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 9 (term -> term DIVIDE factor .)


state 24

    (4) statement -> PRINT LPAREN VARIABLE RPAREN .

    $end            reduce using rule 4 (statement -> PRINT LPAREN VARIABLE RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 2 resolved using rule (statement -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 2
